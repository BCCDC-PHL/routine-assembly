manifest {
    author = 'Dan Fornika'
    name = 'BCCDC-PHL/routine-assembly'
    version = '0.4.7'
    description = 'BCCDC-PHL Routine Assembly'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
}

params {
    prokka = false
    bakta = false
    hybrid = false
    long_only = false
    bakta_db = '/data/ref_databases/bakta/latest'
    illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    long_read_suffixes = ['*_RL', '*_L']
    fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
    fastq_search_path = makeFastqSearchPath(illumina_suffixes, fastq_exts)
    fastq_input = 'NO_FILE'
    long_reads_search_path = makeLongReadsSearchPath(long_read_suffixes, fastq_exts)
    fastq_input_long = 'NO_FILE'
    filtlong_min_length = 1000
    filtlong_keep_percent = 90
    samplesheet_input = 'NO_FILE'
    use_sample_id_as_annotation_locustag = false
    annotation_centre = 'BCCDC-PHL'
    pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
    pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
}

def makeFastqSearchPath(illumina_suffixes, fastq_exts) {
    def fastq_search_path = []
    if (params.fastq_input.toString() != 'NO_FILE') {
        for (suffix in illumina_suffixes) {
            for (ext in fastq_exts) {
                fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
            }
	}
    }
    return fastq_search_path
}

def makeLongReadsSearchPath(long_read_suffixes, fastq_exts) {
    def fastq_search_path = []
    if (params.fastq_input_long.toString() != 'NO_FILE') {
        for (suffix in long_read_suffixes) {
            for (ext in fastq_exts) {
                fastq_search_path.add(params.fastq_input_long.toString() + '/' + suffix.toString() + ext.toString())
	    }
        }
    }
    return fastq_search_path
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

profiles {
    conda {
	conda.enabled = true
	process.conda = "$baseDir/environments/environment.yml"
	if (params.cache){
	    conda.cacheDir = params.cache
	}
    }
    apptainer {
    	apptainer.enabled = true
	process.container = "oras://ghcr.io/bccdc-phl/routine-assembly:aee7cc87a5558e24"
	if (params.cache) {
	    apptainer.cacheDir = params.cache
	}
    }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
    withName: quast {
	cpus = 2
    }
    withName: fastp {
	cpus = 4
        memory = "4 GB"
    }
    withName: filtlong {
	cpus = 12
        memory = "4 GB"
    }
    withName: unicycler {
	cpus = 12
        memory = "12 GB"
    }
    withName: prokka {
	cpus = 8
        memory = "4 GB"
    }
    withName: bakta {
	cpus = 12
        memory = "4 GB"
	conda = "$baseDir/environments/bakta.yml"
	container = "oras://ghcr.io/bccdc-phl/routine-assembly-bakta:485b33265578a495"
    }
}
