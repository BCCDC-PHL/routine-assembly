params {
  prokka = true
  bakta = false
  shovill = true
  unicycler = false
  bakta_db = '/data/ref_databases/bakta/db-latest'
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
  fastq_input = 'NO_FILE'
  samplesheet_input = 'NO_FILE'
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

profiles {
  conda {
    process.conda = "$baseDir/environments/environment.yml"
    if (params.cache){
     conda.cacheDir = params.cache
    }
  }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  withName: quast {
    cpus = 2
  }
  withName: fastp {
    cpus = 4
  }
  withName: shovill {
    cpus = 12
  }
  withName: unicycler {
    cpus = 12
    conda = "$baseDir/environments/unicycler.yml"
  }
  withName: prokka {
    cpus = 8
  }
  withName: bakta {
    cpus = 12
    conda = "$baseDir/environments/bakta.yml"
  }
}

manifest {
  author = 'Dan Fornika'
  name = 'BCCDC-PHL/routine-assembly'
  version = '0.2.1'
  description = 'BCCDC-PHL Routine Assembly'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
}

